'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/hooks/useAuth';
import AdminNav from '@/components/admin/AdminNav';
import Footer from '@/components/common/Footer';
import ProtectedRoute from '@/components/common/ProtectedRoute';
import Image from 'next/image';

interface ClubMember {
  _id: string;
  userId?: {
    _id: string;
    studentId: string;
    name: string;
    email: string;
    role: 'STUDENT' | 'OFFICER' | 'ADMIN';
    phone?: string;
    class?: string;
    faculty?: string;
    avatarUrl?: string;
  };
  status: 'ACTIVE' | 'PENDING' | 'REJECTED';
  joinedAt: string;
  approvedAt?: string;
  approvedBy?: {
    _id: string;
    name: string;
    studentId: string;
  };
  motivation?: string;
  experience?: string;
  expectations?: string;
  commitment?: string;
  createdAt: string;
  updatedAt: string;
}

export default function MembersPage() {
  const router = useRouter();
  const { user } = useAuth();
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [members, setMembers] = useState<ClubMember[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [roleFilter, setRoleFilter] = useState<string>('ALL');
  const [facultyFilter, setFacultyFilter] = useState<string>('ALL');
  const [sortBy, setSortBy] = useState<string>('joinedAt');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [currentPage, setCurrentPage] = useState(1);
  const [membersPerPage] = useState(10);
  const [totalMembers, setTotalMembers] = useState(0);
  const [stats, setStats] = useState({
    total: 0,
    active: 0,
    pending: 0,
    rejected: 0
  });

  // Danh s√°ch khoa/vi·ªán
  const facultyOptions = [
    'Tr∆∞·ªùng Kinh T·∫ø T√†i Ch√≠nh',
    'Tr∆∞·ªùng Lu·∫≠t V√† Qu·∫£n L√≠ Ph√°t Tri·ªÉn',
    'Vi·ªán K·ªπ Thu·∫≠t C√¥ng Ngh·ªá',
    'Vi·ªán ƒê√†o T·∫°o Ngo·∫°i Ng·ªØ',
    'Vi·ªán ƒê√†o T·∫°o CNTT Chuy·ªÉn ƒê·ªïi S·ªë',
    'Vi·ªán ƒê√†o T·∫°o Ki·∫øn Tr√∫c X√¢y D·ª±ng V√† Giao Th√¥ng',
    'Khoa S∆∞ Ph·∫°m',
    'Khoa Ki·∫øn Th·ª©c Chung',
    'Khoa C√¥ng Nghi·ªáp VƒÉn H√≥a Th·ªÉ Thao V√† Du L·ªãch',
    'Ban Qu·∫£n L√Ω ƒê√†o T·∫°o Sau ƒê·∫°i H·ªçc'
  ];

  // Load theme from localStorage on component mount
  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
      setIsDarkMode(true);
    }

    // Listen for theme changes from AdminNav
    const handleThemeChange = () => {
      const currentTheme = localStorage.getItem('theme');
      setIsDarkMode(currentTheme === 'dark');
    };

    window.addEventListener('themeChange', handleThemeChange);
    return () => window.removeEventListener('themeChange', handleThemeChange);
  }, []);

  // Load members data
  useEffect(() => {
    loadMembers();
  }, [searchTerm, roleFilter, facultyFilter, sortBy, sortOrder, currentPage]);

  const loadMembers = async () => {
    setLoading(true);
    try {
      // Build query parameters
      const params = new URLSearchParams();
      if (searchTerm) params.append('search', searchTerm);
      if (roleFilter !== 'ALL') params.append('role', roleFilter);
      if (facultyFilter !== 'ALL') params.append('faculty', facultyFilter);
      params.append('status', 'ACTIVE'); // Only load active members
      params.append('sortBy', sortBy);
      params.append('sortOrder', sortOrder);
      params.append('page', currentPage.toString());
      params.append('limit', membersPerPage.toString());

      // Get auth token
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No authentication token found');
      }

      const response = await fetch(`/api/memberships?${params}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to load members');
      }

      const data = await response.json();
      
      if (data.success) {
        setMembers(data.data.memberships);
        setTotalMembers(data.data.total || data.data.memberships.length);
      } else {
        throw new Error(data.error || 'Failed to load members');
      }
    } catch (error) {
      console.error('Error loading members:', error);
    } finally {
      setLoading(false);
    }
  };

  // Load stats
  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const response = await fetch('/api/memberships/stats', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setStats(data.data);
        }
      }
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  };

  // Pagination
  const totalPages = Math.ceil(totalMembers / membersPerPage);

  const getRoleBadge = (role: string) => {
    const roleConfig = {
      ADMIN: { color: 'bg-red-100 text-red-800', text: 'ADMIN' },
      OFFICER: { color: 'bg-blue-100 text-blue-800', text: 'Ban Ch·∫•p H√†nh' },
      STUDENT: { color: 'bg-gray-100 text-gray-800', text: 'Th√†nh Vi√™n CLB' }
    };
    const config = roleConfig[role as keyof typeof roleConfig];
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full ${config.color}`}>
        {config.text}
      </span>
    );
  };

  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map(word => word.charAt(0))
      .join('')
      .toUpperCase()
      .slice(0, 2);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  return (
    <ProtectedRoute requiredRole="ADMIN">
      <div className={`min-h-screen flex flex-col transition-colors duration-200 ${isDarkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <AdminNav />
        
        <main className="flex-1 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
          {/* Header */}
          <div className="mb-6 sm:mb-8">
            <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
              <div>
                <h1 className={`text-2xl sm:text-3xl font-bold mb-2 transition-colors duration-200 ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                  Th√†nh vi√™n CLB Sinh vi√™n 5 T·ªët
                </h1>
                <p className={`text-sm sm:text-base transition-colors duration-200 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                  Danh s√°ch c√°c th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† tham gia c√¢u l·∫°c b·ªô
                </p>
              </div>
              <div className="mt-4 sm:mt-0 flex space-x-3">
                <button 
                  onClick={() => router.push('/admin/memberships')}
                  className={`px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors duration-200 flex items-center space-x-2`}
                >
                  <span>üìù</span>
                  <span>X√©t duy·ªát ƒë∆°n</span>
                </button>
                <button 
                  onClick={() => router.push('/admin/members/add')}
                  className={`px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center space-x-2`}
                >
                  <span>‚ûï</span>
                  <span>Th√™m th√†nh vi√™n</span>
                </button>
              </div>
            </div>
          </div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-4 mb-6">
            <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg border p-4 shadow-sm`}>
              <div className="flex items-center">
                <div className="p-2 bg-blue-100 rounded-lg">
                  <span className="text-blue-600 text-xl">üë•</span>
                </div>
                <div className="ml-4">
                  <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>T·ªïng th√†nh vi√™n</p>
                  <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>{stats.active}</p>
                </div>
              </div>
            </div>
            <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg border p-4 shadow-sm`}>
              <div className="flex items-center">
                <div className="p-2 bg-green-100 rounded-lg">
                  <span className="text-green-600 text-xl">‚úÖ</span>
                </div>
                <div className="ml-4">
                  <p className={`text-sm font-medium ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>ƒê√£ duy·ªát</p>
                  <p className={`text-2xl font-bold ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>{stats.active}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Filters and Search */}
          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg border p-4 mb-6 shadow-sm`}>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4">
              {/* Search */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  T√¨m ki·∫øm
                </label>
                <input
                  type="text"
                  placeholder="T√™n, MSSV, email..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                  }`}
                />
              </div>

              {/* Role Filter */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Vai tr√≤
                </label>
                <select
                  value={roleFilter}
                  onChange={(e) => setRoleFilter(e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'bg-white border-gray-300 text-gray-900'
                  }`}
                >
                  <option value="ALL">T·∫•t c·∫£</option>
                  <option value="ADMIN">Admin</option>
                  <option value="OFFICER">Ban Ch·∫•p H√†nh</option>
                  <option value="STUDENT">Th√†nh Vi√™n CLB</option>
                </select>
              </div>

              {/* Faculty Filter */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Khoa/Vi·ªán
                </label>
                <select
                  value={facultyFilter}
                  onChange={(e) => setFacultyFilter(e.target.value)}
                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'bg-white border-gray-300 text-gray-900'
                  }`}
                >
                  <option value="ALL">T·∫•t c·∫£ khoa/vi·ªán</option>
                  {facultyOptions.map((faculty) => (
                    <option key={faculty} value={faculty}>
                      {faculty}
                    </option>
                  ))}
                </select>
              </div>

              {/* Sort */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  S·∫Øp x·∫øp
                </label>
                <select
                  value={`${sortBy}-${sortOrder}`}
                  onChange={(e) => {
                    const [field, order] = e.target.value.split('-');
                    setSortBy(field);
                    setSortOrder(order as 'asc' | 'desc');
                  }}
                  className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white' 
                      : 'bg-white border-gray-300 text-gray-900'
                  }`}
                >
                  <option value="joinedAt-desc">Tham gia m·ªõi nh·∫•t</option>
                  <option value="joinedAt-asc">Tham gia c≈© nh·∫•t</option>
                  <option value="name-asc">T√™n A-Z</option>
                  <option value="name-desc">T√™n Z-A</option>
                  <option value="studentId-asc">MSSV A-Z</option>
                  <option value="studentId-desc">MSSV Z-A</option>
                </select>
              </div>

              {/* Export */}
              <div>
                <label className={`block text-sm font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  Xu·∫•t d·ªØ li·ªáu
                </label>
                <button
                  onClick={() => {/* TODO: Implement export */}}
                  className={`w-full px-3 py-2 border rounded-lg transition-colors ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-white hover:bg-gray-600' 
                      : 'bg-white border-gray-300 text-gray-900 hover:bg-gray-50'
                  }`}
                >
                  üìä Xu·∫•t Excel
                </button>
              </div>
            </div>
          </div>

          {/* Members Table */}
          <div className={`${isDarkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} rounded-lg border shadow-sm overflow-hidden`}>
            {loading ? (
              <div className="p-8 text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                <p className={`mt-4 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>ƒêang t·∫£i d·ªØ li·ªáu...</p>
              </div>
            ) : (
              <>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className={`${isDarkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>
                      <tr>
                        <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDarkMode ? 'text-gray-300' : 'text-gray-500'}`}>
                          Th√†nh vi√™n
                        </th>
                        <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDarkMode ? 'text-gray-300' : 'text-gray-500'}`}>
                          Th√¥ng tin li√™n h·ªá
                        </th>
                        <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDarkMode ? 'text-gray-300' : 'text-gray-500'}`}>
                          Vai tr√≤ & Ng√†y tham gia
                        </th>
                        <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDarkMode ? 'text-gray-300' : 'text-gray-500'}`}>
                          Ng∆∞·ªùi duy·ªát
                        </th>
                        <th className={`px-6 py-3 text-left text-xs font-medium uppercase tracking-wider ${isDarkMode ? 'text-gray-300' : 'text-gray-500'}`}>
                          Thao t√°c
                        </th>
                      </tr>
                    </thead>
                    <tbody className={`${isDarkMode ? 'bg-gray-800 divide-gray-700' : 'bg-white divide-gray-200'}`}>
                      {members.map((member: ClubMember) => (
                        <tr key={member._id} className={`${isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'} transition-colors duration-200`}>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="flex-shrink-0 h-12 w-12">
                                {member.userId?.avatarUrl ? (
                                  <Image
                                    src={member.userId.avatarUrl}
                                    alt={member.userId.name || 'User'}
                                    width={48}
                                    height={48}
                                    className="h-12 w-12 rounded-full object-cover"
                                  />
                                ) : (
                                  <div className="h-12 w-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center">
                                    <span className="text-white text-sm font-bold">
                                      {getInitials(member.userId?.name || 'U')}
                                    </span>
                                  </div>
                                )}
                              </div>
                              <div className="ml-4">
                                <div className={`text-sm font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                                  {member.userId?.name || 'Kh√¥ng c√≥ t√™n'}
                                </div>
                                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                  {member.userId?.studentId || 'Kh√¥ng c√≥ MSSV'}
                                </div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>
                              <div>{member.userId?.email || 'Kh√¥ng c√≥ email'}</div>
                              {member.userId?.phone && (
                                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                  üìû {member.userId.phone}
                                </div>
                              )}
                              {member.userId?.class && member.userId?.faculty && (
                                <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                  üè´ {member.userId.class} - {member.userId.faculty}
                                </div>
                              )}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="space-y-2">
                              {getRoleBadge(member.userId?.role || 'STUDENT')}
                              <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                üìÖ {formatDate(member.joinedAt)}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className={`text-sm ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>
                              {member.approvedBy ? (
                                <>
                                  <div className="font-medium">{member.approvedBy.name}</div>
                                  <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                    {member.approvedBy.studentId}
                                  </div>
                                  {member.approvedAt && (
                                    <div className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                      {formatDate(member.approvedAt)}
                                    </div>
                                  )}
                                </>
                              ) : (
                                <span className={`text-xs ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                                  Kh√¥ng c√≥ th√¥ng tin
                                </span>
                              )}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div className="flex items-center space-x-2">
                              <button 
                                onClick={() => router.push(`/admin/members/${member._id}`)}
                                className={`p-2 rounded-lg transition-colors duration-200 ${
                                  isDarkMode 
                                    ? 'text-blue-400 hover:bg-blue-900 hover:text-blue-300' 
                                    : 'text-blue-600 hover:bg-blue-50 hover:text-blue-700'
                                }`} 
                                title="Xem chi ti·∫øt"
                              >
                                üëÅÔ∏è
                              </button>
                              <button 
                                onClick={() => router.push(`/admin/members/${member._id}/edit`)}
                                className={`p-2 rounded-lg transition-colors duration-200 ${
                                  isDarkMode 
                                    ? 'text-green-400 hover:bg-green-900 hover:text-green-300' 
                                    : 'text-green-600 hover:bg-green-50 hover:text-green-700'
                                }`} 
                                title="Ch·ªânh s·ª≠a"
                              >
                                ‚úèÔ∏è
                              </button>
                              <button 
                                onClick={() => {/* TODO: Implement delete */}}
                                className={`p-2 rounded-lg transition-colors duration-200 ${
                                  isDarkMode 
                                    ? 'text-red-400 hover:bg-red-900 hover:text-red-300' 
                                    : 'text-red-600 hover:bg-red-50 hover:text-red-700'
                                }`} 
                                title="X√≥a kh·ªèi CLB"
                              >
                                üóëÔ∏è
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>

                {/* Empty State */}
                {members.length === 0 && !loading && (
                  <div className="p-8 text-center">
                    <div className="text-6xl mb-4">üë•</div>
                    <h3 className={`text-lg font-medium mb-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-900'}`}>
                      Ch∆∞a c√≥ th√†nh vi√™n n√†o
                    </h3>
                    <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                      Hi·ªán t·∫°i ch∆∞a c√≥ th√†nh vi√™n n√†o ƒë∆∞·ª£c duy·ªát tham gia CLB
                    </p>
                  </div>
                )}

                {/* Pagination */}
                {totalPages > 1 && (
                  <div className={`px-6 py-4 border-t ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                    <div className="flex items-center justify-between">
                      <div className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
                        Hi·ªÉn th·ªã {((currentPage - 1) * membersPerPage) + 1} ƒë·∫øn {Math.min(currentPage * membersPerPage, totalMembers)} trong t·ªïng s·ªë {totalMembers} th√†nh vi√™n
                      </div>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                          disabled={currentPage === 1}
                          className={`px-3 py-1 rounded-lg text-sm transition-colors duration-200 ${
                            currentPage === 1
                              ? `${isDarkMode ? 'text-gray-500 bg-gray-700' : 'text-gray-400 bg-gray-100'} cursor-not-allowed`
                              : `${isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'}`
                          }`}
                        >
                          ‚Üê Tr∆∞·ªõc
                        </button>
                        
                        {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
                          <button
                            key={page}
                            onClick={() => setCurrentPage(page)}
                            className={`px-3 py-1 rounded-lg text-sm transition-colors duration-200 ${
                              currentPage === page
                                ? 'bg-blue-600 text-white'
                                : `${isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'}`
                            }`}
                          >
                            {page}
                          </button>
                        ))}
                        
                        <button
                          onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                          disabled={currentPage === totalPages}
                          className={`px-3 py-1 rounded-lg text-sm transition-colors duration-200 ${
                            currentPage === totalPages
                              ? `${isDarkMode ? 'text-gray-500 bg-gray-700' : 'text-gray-400 bg-gray-100'} cursor-not-allowed`
                              : `${isDarkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-700 hover:bg-gray-100'}`
                          }`}
                        >
                          Sau ‚Üí
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </>
            )}
          </div>
        </main>

        <Footer />
      </div>
    </ProtectedRoute>
  );
}
